/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * WhatIfTemplatesResponse PI_JSON
 */
export interface WhatIfTemplatesResponse {
  /**
   * WhatIfTemplates
   */
  whatIfTemplates: WhatIfTemplate[];
}
export interface WhatIfTemplate {
  /**
   * the id of the workflow
   */
  id: string;
  /**
   * The name of the workflow
   */
  name: string;
  /**
   * WhatIfProperties
   */
  properties?: (
    | WhatIfConfigFileProperty
    | WhatIfBooleanProperty
    | WhatIfIntProperty
    | WhatIfDoubleProperty
    | WhatIfStringProperty
    | WhatIfTemplateProperty
    | WhatIfEnumProperty
  )[];
}
export interface WhatIfConfigFileProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "configFile";
  /**
   * The config file type
   */
  configFileType: "cold state" | "module dataset" | "module parameter";
  /**
   * The default config file
   */
  default?: string;
  /**
   * The configured pattern
   */
  pattern?: string;
}
export interface WhatIfBooleanProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The name of the property
   */
  type: "boolean";
  /**
   * The default value of the property
   */
  defaultValue: boolean;
}
export interface WhatIfIntProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "integer";
  /**
   * The default value of the property
   */
  defaultValue: number;
}
export interface WhatIfDoubleProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "double";
  /**
   * The default value of the property
   */
  defaultValue: number;
  /**
   * The min value of the property
   */
  minValue?: number;
  /**
   * The max value of the property
   */
  maxValue?: number;
}
export interface WhatIfStringProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "string";
  /**
   * The default value of the property
   */
  defaultValue: string;
}
export interface WhatIfTemplateProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "whatIfTemplateId";
  /**
   * The template id of the referenced whatif
   */
  templateId: string;
}
export interface WhatIfEnumProperty {
  /**
   * the id of the property
   */
  id: string;
  /**
   * The name of the property
   */
  name: string;
  /**
   * The type of the property
   */
  type: "enumProperty";
  /**
   * The default value of the property
   */
  defaultValue: number;
  /**
   * values of the enum
   */
  values: WhatIfEnumPropertyValues[];
}
export interface WhatIfEnumPropertyValues {
  /**
   * the code of the value
   */
  code: string;
  /**
   * The label of the value
   */
  label: string;
}
